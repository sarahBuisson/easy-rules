buildscript {

    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
        google()
        gradlePluginPortal()

        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url = 'https://dl.bintray.com/russhwolf/multiplatform-settings' }
    }
    dependencies {
        classpath 'io.github.microutils:kotlin-logging:1.6.22'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.20"
    }


}
plugins {
    id 'java' //need for the "from"
    id 'java-library'
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.20'
    id("maven-publish")
}
repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    google()
    gradlePluginPortal()

    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url = 'https://dl.bintray.com/russhwolf/multiplatform-settings' }
}


kotlin {
    // JS target named 'js'
    sourceSets {
        commonMain {
            kotlin.srcDir('src/main/java')
            resources.srcDir('src/main/resource')
            dependencies {
                implementation "io.github.microutils:kotlin-logging:1.6.22"
                implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.20"
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:1.3.20"

                implementation("org.jeasy:easy-rules-core:3.2.3")

            //    implementation(project(":easy-rules-core"))
            }
        }
        jvmTest {//TODO : commonTest instead of jvmtest, wwhen mockk.js will be better at it
            kotlin.srcDir('src/test/java')
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
                implementation 'io.mockk:mockk-common:1.9'

            }
        }
        jvm {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.20"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
                implementation 'io.mockk:mockk:1.9'
                implementation("org.jeasy:easy-rules-core-jvm:3.2.3")
            }
        }
        js {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:1.3.20"
                implementation "io.github.microutils:kotlin-logging-js:1.6.22"
                implementation "org.jetbrains.kotlin:kotlin-test-js:1.3.20"
                implementation 'io.mockk:mockk-js:1.7.17'
                implementation("org.jeasy:easy-rules-core-js:3.2.3")
            }
        }
    }

    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.8"
        }
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-jvm"
        }
        preparePublishing(it)

    }
    js() {
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-js"
        }
        preparePublishing(it)
    }
    metadata {
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-common"
        }
        printClass(it)
      //  preparePublishing(it)
    }

}

def preparePublishing(target) {
     publishing {
        publications {
            "mavenPublication${target.name}"(MavenPublication) { pub ->
                println("MavenPublication " + target.name)
                // printLn(configurations.compile.allDependencies)
                // printLn(configurations.implementation.allDependencies)
                groupId "org.jeasy"
                version 1
                // from components.kotlin
                from components[target.name]
                pom {}// needed to separate the differente poms
                pom.withXml {
                    def root=asNode()
                    def dependenciesNode = asNode().get('dependencies')
                    if (dependenciesNode == null) {
                        dependenciesNode = asNode().appendNode('dependencies')
                    }

                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                def artifactName = "${buildDir}/libs/${artifactId}-${target.name}-${version}.jar"
                def artifactSourceName = "${buildDir}/libs/${artifactId}-${target.name}-${version}-sources.jar"
                println("publish $artifactName")


                artifact source:artifactName, classifier:"jar", extension:"jar"

                if(file(artifactSourceName).exists()) {
                    println("exist $artifactSourceName")
                    artifact source: artifactSourceName, classifier: "sources", extension: "jar"
                }
            }

        }
    }
}
task listrepos {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
    }
}

def printClass(obj) {
    if (obj == null) {
        println("null")
        return
    }
    println(obj.class)/*
    def fields = obj.class.getDeclaredFields()
    def methods = obj.class.getDeclaredMethods()
    System.out.printf("%d fields:%n", fields.length);
    for (field in fields) {
        System.out.printf("%s %s %s%n",
                Modifier.toString(field.getModifiers()),
                field.getType().getSimpleName(),
                field.getName()
        );
    }
    System.out.printf("%d methods:%n", methods.length);
    for (field in methods) {
        System.out.printf("%s %s (",
                field.getReturnType().getSimpleName(),
                field.getName()
        );
        for (p in field.getParameterTypes())
            System.out.printf("%s, ", p.getSimpleName())
        System.out.printf(")%n")
    }*/
    println("--end--")
}
