buildscript {

    ext {
        kotlin_version = '1.3.21'
        kotlin_logging_version = "1.6.22"
        coroutines_version ="0.23.3"
    }
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
        google()
        gradlePluginPortal()

        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url = 'https://dl.bintray.com/russhwolf/multiplatform-settings' }
    }
    dependencies {
        classpath 'io.github.microutils:kotlin-logging:1.6.22'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }


}
plugins {
    id 'java' //need for the "from"
    id 'java-library'
    id 'org.jetbrains.kotlin.multiplatform' version '$kotlin_version'
    id("maven-publish")
}
repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
    google()
    gradlePluginPortal()

    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url = 'https://dl.bintray.com/russhwolf/multiplatform-settings' }
}


def gradleUtils=file("./gradle/util.gradle")
allprojects{
    apply from: gradleUtils
    group 'org.jeasy'
    version '3.2.3'

}
kotlin {
    targets{
        fromPreset(presets.js, 'js') {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    metaInfo = true
                    outputFile = "${projectDir}/build/npm/index.js"
                    sourceMap = true
                    moduleKind = 'umd'
                    main = 'call'
                }
            }
        }
    }

    // JS target named 'js'
    sourceSets {
        commonMain {
            kotlin.srcDir('src/main/java')
            resources.srcDir('src/main/resource')
            dependencies {
                implementation "io.github.microutils:kotlin-logging:1.6.22"
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

                implementation("org.jeasy:easy-rules-core:3.2.3")

            //    implementation(project(":easy-rules-core"))
            }
        }
        jvmTest {//TODO : commonTest instead of jvmtest, wwhen mockk.js will be better at it
            kotlin.srcDir('src/test/java')
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
                implementation 'io.mockk:mockk-common:1.9'

            }
        }
        jvm {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-junit"
                implementation 'io.mockk:mockk:1.9'
                implementation("org.jeasy:easy-rules-core-jvm:3.2.3")
            }
        }
        js {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
                implementation "io.github.microutils:kotlin-logging-js:1.6.22"
                implementation "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
                implementation 'io.mockk:mockk-js:1.7.17'
                implementation("org.jeasy:easy-rules-core-js:3.2.3")
            }
        }
    }

    jvm {
        compilations.main.kotlinOptions {
            // Setup the Kotlin compiler options for the 'main' compilation:
            jvmTarget = "1.8"
        }
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-jvm"
        }
        preparePublishing(it)

    }
    js() {
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-js"
        }

        configurePublishingWithNPM(it, project.version, configurations, this)
    }
    metadata {
        mavenPublication {
            groupId "org.jeasy"
            artifactId project.name + "-common"
        }

      //  preparePublishing(it)
    }

}
