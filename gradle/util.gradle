import groovy.json.JsonBuilder

ext.configurePublishingWithNPM = { target, baseVersion, configurations, that ->

    that.task('initNpm')     {
        doLast {
            def dir = that.file("$buildDir/npm")
            dir.mkdirs()
            that.file("$buildDir/npm/node_modules").mkdirs()
        }
    }


    that.task('buildPackageJson') {
        doLast {

            def packageJsonData = [name               : that.project.name + "-js",
                                   version: baseVersion,
                                   private: true,
                                   dependencies    : new HashMap(),
                                   devDependencies    : ["install-jar-dependency": "latest"],
                                   scripts            : [
                                           postinstall: "npx install-jar-dependency package.json"
                                   ],
                                   jarDependencies    : new HashMap(),
                                   mavenDependencies  : new HashMap(),
                                   workspaces         : new ArrayList(),
                                   bundledDependencies: new ArrayList(),
                                   main: that.project.name,
                                   "author": [
                                       "name": "Sarah Buisson",
                                       "email": "sarah.buisson@gmail.com",
                                       "website": "https://github.com/sarahBuisson/"
                                   ],
                                   "homepage": "https://github.com/sarahBuisson/easy-rules",
                                   "license": "ISC"

            ]

            //download all the maven js dependencies and put them into an embedded directory.
            //TO DO : we probably don"t need to do so now we have mavenDependancy plugin
            configurations.jsImplementation.allDependencies.each {
                if (it != null && it.name.contains("js")) {
                    packageJsonData.mavenDependencies.put(it.name, "${it.group}:${it.name}:${it.version}")
                }
            }
            packageJsonData.dependencies.put("kotlin", "$kotlin_version")

            def packageJson = that.file("$buildDir/npm/package.json")
            packageJson.getParentFile().mkdirs()
            packageJson.createNewFile()
            packageJson.write(new JsonBuilder(packageJsonData).toPrettyString())

           }
    }

//TODO : why I can"t rename it npmInstall?
    that.task('npmInstall2',type: Exec) {

        dependsOn "buildPackageJson"
        dependsOn "assemble"
        dependsOn "extractCompiledFiles"
        workingDir "$buildDir/npm"
        commandLine "echo","4" //TODO : do we need-it?
        doLast {
            exec {
                workingDir "$buildDir/npm"
                commandLine "npm", "install"
            }


            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }


            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
        }
    }


//DO  i need it?
    that.task("execNpmPack",type: Exec) {

        dependsOn "buildPackageJson"
        dependsOn "npmInstall2"
        dependsOn "extractCompiledFiles"

        workingDir "."
        commandLine "echo", "execNpmPack"

        standardOutput = new ByteArrayOutputStream()
        errorOutput = standardOutput
        ignoreExitValue = true
        def output = {
            return standardOutput.toString()
        }
        doLast {
            System.out.println("beg exec pack")
            exec {
                workingDir that.file("$buildDir/npm").absolutePath
                commandLine "yarn","pack"
            }
            //"/usr/local/bin/npm","init"

            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
            System.out.println("end exec link")
        }
    }


    that.task("extractCompiledFiles") {
        dependsOn "jsMainClasses"
        dependsOn "buildPackageJson"
        doLast {
            copy {

                println( configurations.jsImplementation.allDependencies)
                from "$buildDir/classes/kotlin/js/main"
                into "$buildDir/npm"


            }
        }
    }



    publish.dependsOn "buildPackageJson"
    publish.dependsOn "execNpmPack"

    that.task("publishNpmLocal") {
    that.publishing{
        publications {

            def PrepPublishJsNpmTgzTask = project.tasks.create("PrepPublishJsNpmTgzTask",{
               def publishJsNpmTgzTask= create("publishJsNpmTgzTask", MavenPublication) {

                    //publishableFiles "$buildDir/npm/${that.project.name}-js-${that.project.version}.tgz"
                    println "beg publish $project.group $project.version"
                    def sourceFile = "$buildDir/npm/${that.project.name}-js-v${that.project.version}.tgz"
                    println(sourceFile)

                    artifactId that.project.name + "-js-tgz"
                    groupId project.group
                    version project.version
                    artifact source: sourceFile, extension: "tgz"

                    println "end"
                }

            })




        }

    }};
    //publishNodeJsPublicationToMavenLocal.dependsOn(publishNpmLocal)
    publishToMavenLocal.dependsOn(publishNpmLocal)
    publishJsPublicationToMavenLocal.dependsOn(publishNpmLocal)
    publishNpmLocal.dependsOn("jsMainClasses")
    publishNpmLocal.dependsOn("execNpmPack")


};

ext.printClass = { obj ->
    if (obj == null) {
        println("null")
        return
    }
    println(obj.class)
    def fields = obj.class.getDeclaredFields()
    def methods = obj.class.getDeclaredMethods()
    System.out.printf("%d fields:%n", fields.length);
    for (field in fields) {
        System.out.printf("%s %s %n",
                // Modifier.toString(field.getModifiers()),
                field.getType().getSimpleName(),
                field.getName()
        );
    }
    System.out.printf("%d methods:%n", methods.length);
    for (field in methods) {
        System.out.printf("%s %s (",
                field.getReturnType().getSimpleName(),
                field.getName()
        );
        for (p in field.getParameterTypes())
            System.out.printf("%s, ", p.getSimpleName())
        System.out.printf(")%n")
    }
    println("--end--")
};

ext.preparePublishing = { target, that ->
    println("preparePublishing maven")
    publishing {
        publications {
            "mavenPublication${target.name}"(MavenPublication) { pub ->
println("run preparePublishing maven")
                from components[0]
                pom {}
                pom.withXml {
                    def dependenciesNode = asNode().get("dependencies")
                    if (dependenciesNode == null) {
                        dependenciesNode = asNode().appendNode("dependencies")
                    }

                    //Iterate over the compile dependencies (we don"t want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", it.group)
                        dependencyNode.appendNode("artifactId", it.name)
                        dependencyNode.appendNode("version", it.version)
                    }
                }
                def artifactName = "${buildDir}/libs/${that.project.name}-${target.name}-${project.version}.jar"
                def artifactSourceName = "${buildDir}/libs/$that.project.name}-${target.name}-${project.version}-sources.jar"

                artifact source: artifactName, classifier: "jar", extension: "jar"
println artifactName
                if (file(artifactSourceName).exists()) {
                    artifact source: artifactSourceName, classifier: "sources", extension: "jar"
                }
            }

        }
    }
}


