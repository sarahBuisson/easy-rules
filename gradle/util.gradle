import groovy.json.JsonBuilder

ext.configurePublishingWithNPM = { target, baseVersion, configurations, that ->

    that.tasks.add(task(initNpm() {
        doLast {
            System.out.println("init npm dir")
            def dir = that.file("$buildDir/npm")
            System.out.println(dir)
            dir.mkdirs()
            System.out.println("end npm dir")
        }
    }))


    that.tasks.add(task(buildPackageJson() {


        dependsOn 'embeddedDependency'
        System.out.println("init buildPackageJson")
        doLast { System.out.println("start exec buildPackageJson")}
        doLast {
            System.out.println("start exec buildPackageJson")

            def dir = that.file("$buildDir/npm")
            def packagejson = that.file("$buildDir/npm/package.json")
            def packagejsondata = [name: that.project.name + "-js", version: baseVersion, dependencies: new HashMap(), main: that.project.name + ".js"]
/*
          configurations.jsImplementation.allDependencies.each {
              packagejsondata.dependencies.put(it.name,it.version)
          }*/
            packagejsondata.dependencies.put("kotlin", "$kotlin_version")
            packagejson.getParentFile().mkdirs()
            packagejson.createNewFile()
            packagejson.write(new JsonBuilder(packagejsondata).toPrettyString())
            //  packagejson.close()
            println that.file("$buildDir/classes/kotlin/js/main").listFiles()
            //  from "$buildDir"
            // into "./npm"


            println that.file("$buildDir/npm").listFiles()

            System.out.println("enc of build Package.json:" + packagejson.path + packagejson.exists())
        }
    }))

    that.tasks.add(task(embeddedDependency(type:Exec) {
        dependsOn initNpm


            workingDir "."
            commandLine "echo", "eeee"



        doLast {
            configurations.jsImplementation.allDependencies.each {

                if (it.name.contains("js")) {


                    printClass(it)


                    def artifactId =it.name
                    def group =  it.group
                    def version = it.version

                    def command = "mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.1:get -Dartifact=$group:$artifactId:$version -DoutputDirectory=$buildDir/npm"
                    println(command)
                    println("$buildDir/npm")
                    exec {
                        workingDir "$buildDir/npm"
                        commandLine command.split(" ")
                    }

                    def command2 = "mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.1:copy -Dartifact=$group:$artifactId:$version -DoutputDirectory=$buildDir/jsDependenciesJar"
                    exec {
                        workingDir "$buildDir/npm"
                        commandLine command2.split(" ")
                    }
                    copy {
                        def file = file("$buildDir/jsDependenciesJar/$artifactId-${version}.jar")
                        println(file)
                        from zipTree(file)
                        into "$buildDir/npm/libs/${artifactId}"
                    }


                }
            }

        }

/*
        doLast {
            println("embeddedDependency")
            println(configurations.compile)
            printClass(configurations)
            println(configurations.getAsMap().keySet())

            println("embeddedDependency")
            printClass(configurations.jsImplementation)
            println(configurations.jsImplementation.getAll())
            println(configurations.jsImplementation.getAllDependencies())



            println(configurations.jsImplementation.getDependencies())
            println(configurations.metadataCompileClasspath)
            printClass(configurations.metadataCompileClasspath)
            printClass(configurations.metadataCompileClasspath.getPath())
            println(configurations.metadataCompileClasspath)
            println("configurations.jsRuntimeClasspath")
            println("configurations.jsRuntimeClasspath")
            println(configurations.jsRuntime)
            println(configurations.jsImplementation)
            println("IIIIII")
            println("cSSSSSS")
            printClass(configurations.jsImplementation)

            copy {
                from configurations.runtimeClasspath

                into "$buildDir/npm"
            }
        }*/
    }))

    that.tasks.add(task(execNpmBuild(type: Exec) {

        dependsOn 'buildPackageJson'
        dependsOn 'assemble'
        dependsOn 'extractCompiledFiles'
        workingDir "$buildDir/npm"
        commandLine 'npm', 'install'
        doLast {
            println "execNpmBuild"
            exec {
                workingDir "$buildDir/npm"
                commandLine 'npm', 'install'
            }


            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }


            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
        }
    }))


    that.tasks.add(task(execNpmInstallGlobal(type: Exec) {
        dependsOn 'buildPackageJson'
        dependsOn 'jsMainClasses'
        dependsOn 'extractCompiledFiles'
        doLast {
            workingDir that.file('./build').absolutePath
            commandLine 'cd', 'npm'
            //executable "npm"
            commandLine 'yarn', 'global', 'add'//,"file:npm/${that.project.name}-js-${that.project.version}.tgz"
            //"/usr/local/bin/npm","init"
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }
        }
        doLast {
            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
        }
    }))
    that.tasks.add(task(execNpmLink(type: Exec) {

        dependsOn 'execNpmBuild'
        doLast {
            println "execNpmLink"
            // commandLine
            workingDir "$buildDir/npm"

            commandLine 'npm', 'link'
            //"/usr/local/bin/npm","init"
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }
        }

        doLast {
            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
            System.out.println("end exec link")
        }
    }))

    that.tasks.add(task(execNpmPack(type: Exec) {

        dependsOn 'buildPackageJson'

        workingDir "."
        commandLine 'echo', '"execNpmPack"'

        standardOutput = new ByteArrayOutputStream()
        errorOutput = standardOutput
        ignoreExitValue = true
        def output = {
            return standardOutput.toString()
        }
        doLast {
            System.out.println("beg exec pack")
            exec {
                workingDir that.file("$buildDir/npm").absolutePath
                commandLine 'npm', 'pack'
            }
            //"/usr/local/bin/npm","init"

            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
            System.out.println("end exec link")
        }
    }))


    that.tasks.add(task(extractCompiledFiles() {
        dependsOn 'jsMainClasses'
        dependsOn 'buildPackageJson'
        doLast {
            from "$buildDir/classes/kotlin/js/main"
            into "$buildDir/npm"
            // exclude 'package/package.json'
            // exclude "$buildDir/npm"
        }
    }
    ))


    // in order to have a tgz in maven , who could be used by npm
    /*that.tasks.add(task(assembleArtifact(type: Zip, group: 'DB') {
        println "assembleArtifact"
        println "$buildDir/libs/"
        archiveName "${that.project.name}.tgz"
        destinationDir file("$buildDir/libs/")
        from "$buildDir/npm"
        description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
        println "end assembleArtifact"
    }))

*/

    that.tasks.add(task(publishNpmLocal() {

    }
    ))
    publishToMavenLocal.dependsOn 'execNpmPack'
    publishToMavenLocal.dependsOn 'buildPackageJson'

    that.tasks.add(task(publishNpmToMaven() {
        dependsOn execNpmPack
        dependsOn buildPackageJson
        doLast {
            that.publishing {
                publications {
                    mavenLocal(MavenPublication) {
                        println "beg"
                        artifact source: "$buildDir/npm/${that.project.name}-js-${that.project.version}.tgz", extension: 'tgz'
                        artifactId that.project.name + "-js"
                        println "end"
                    }
                }
            }
        }
    }));

};

ext.printClass = { obj ->
    if (obj == null) {
        println("null")
        return
    }
    println(obj.class)
    def fields = obj.class.getDeclaredFields()
    def methods = obj.class.getDeclaredMethods()
    System.out.printf("%d fields:%n", fields.length);
    for (field in fields) {
        System.out.printf("%s %s %n",
                // Modifier.toString(field.getModifiers()),
                field.getType().getSimpleName(),
                field.getName()
        );
    }
    System.out.printf("%d methods:%n", methods.length);
    for (field in methods) {
        System.out.printf("%s %s (",
                field.getReturnType().getSimpleName(),
                field.getName()
        );
        for (p in field.getParameterTypes())
            System.out.printf("%s, ", p.getSimpleName())
        System.out.printf(")%n")
    }
    println("--end--")
}

ext.preparePublishing = { target, that ->
    publishing {
        publications {
            "mavenPublication${target.name}"(MavenPublication) { pub ->

                from components[target.name]
                pom {}
                pom.withXml {
                    def dependenciesNode = asNode().get('dependencies')
                    if (dependenciesNode == null) {
                        dependenciesNode = asNode().appendNode('dependencies')
                    }

                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                def artifactName = "${buildDir}/libs/${that.project.name}-${target.name}-${project.version}.jar"
                def artifactSourceName = "${buildDir}/libs/$that.project.name}-${target.name}-${project.version}-sources.jar"

                artifact source: artifactName, classifier: "jar", extension: "jar"

                if (file(artifactSourceName).exists()) {
                    artifact source: artifactSourceName, classifier: "sources", extension: "jar"
                }
            }

        }
    }
}


