import groovy.json.JsonBuilder

ext.configurePublishingWithNPM = { target, baseVersion, configurations, that ->

    that.tasks.add(task(initNpm() {
        doLast {
            System.out.println("init npm dir")
            def dir = that.file("$buildDir/npm")
            System.out.println(dir)
            dir.mkdirs()
            that.file("$buildDir/npm/node_modules").mkdirs()
            System.out.println("end npm dir")
        }
    }))


    that.tasks.add(task(buildPackageJson() {


        dependsOn 'embeddedDependency'
        System.out.println("init buildPackageJson")
        doLast { System.out.println("start exec buildPackageJson")}
        doLast {
            System.out.println("start exec buildPackageJson")

            def dir = that.file("$buildDir/npm")
            def packagejson = that.file("$buildDir/npm/package.json")
            def packagejsondata = [name               : that.project.name + "-js",
                                   version: baseVersion,
                                   "private": true,
                                 /*  devDependencies    : [
                                           "install-jar-dependency":
                                                   "0.0.2"
                                   ],*/ dependencies    : new HashMap(),
                                   scripts            : [
                                           postinstall: "install-jar-dependency package.json"
                                   ],
                                   jarDependencies    : new HashMap(),
                                   mavenDependencies  : new HashMap(),
                                   workspaces         : new ArrayList(),
                                   bundledDependencies: new ArrayList(),
                                   main: that.project.name,
                                   "author": [
                                       "name": "Sarah Buisson",
                                       "email": "sarah.buisson@gmail.com",
                                       "website": "https://github.com/sarahBuisson/"
                                   ],
                                   "homepage": "https://github.com/sarahBuisson/easy-rules",
                                   "license": "ISC"

            ]


            configurations.jsImplementation.allDependencies.each {
                if (it != null && it.name.contains("js")) {

                    def filter = new FilenameFilter() {
                        public boolean accept(File directory, String fileName) {
                            return fileName.endsWith(".js") && !fileName.contains("meta");
                        }
                    }
                    println(it)
                    println(it.name)
                    def fileJS = file("$buildDir/npm/libs/$it.name").list(filter)[0]
                    println(file("$buildDir/npm/libs/$it.name").list())
                    println(fileJS)
                    packagejsondata.jarDependencies.put(it.name, "./libs/${it.name}-${it.version}.jar")
                   // packagejsondata.dependencies.put(it.name.replace("-js",""), "./libs/$it.name/")

                   // packagejsondata.workspaces.add("./libs/$it.name/")
                   // packagejsondata.bundledDependencies.add(it.name)
                    def packagejsonDep = that.file("$buildDir/npm/libs/$it.name/package.json")
                    def packagejsonDepdata = [name: it.name, version: it.version, dependencies: new HashMap(), main: fileJS+".js"]
                    packagejsonDep.write(new JsonBuilder(packagejsonDepdata).toPrettyString())
println("packagejsonDep")


                }

            }
            packagejsondata.dependencies.put("kotlin", "$kotlin_version")
            packagejson.getParentFile().mkdirs()
            packagejson.createNewFile()
            packagejson.write(new JsonBuilder(packagejsondata).toPrettyString())
            //  packagejson.close()
            println that.file("$buildDir/classes/kotlin/js/main").listFiles()
            //  from "$buildDir"
            // into "./npm"


            println that.file("$buildDir/npm").listFiles()

            System.out.println("enc of build Package.json:" + packagejson.path + packagejson.exists())
        }
    }))

    that.tasks.add(task(embeddedDependency(type:Exec) {
        dependsOn initNpm


            workingDir "."
            commandLine "echo", "eeee"



        doLast {
            configurations.jsImplementation.allDependencies.each {

                if (it.name.contains("js")) {


                    printClass(it)


                    def artifactId =it.name
                    def group =  it.group
                    def version = it.version

                    def command = "mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.1:get -Dartifact=$group:$artifactId:$version -DoutputDirectory=$buildDir/npm -DremoteRepositories=https://repo.maven.apache.org/maven2,http://repo1.maven.org/maven2/"
                    println(command)
                    println("$buildDir/npm")
                    exec {
                        workingDir "$buildDir/npm"
                        commandLine command.split(" ")
                    }
                    exec {
                        workingDir "$buildDir/npm/node_modules"
                        commandLine command.split(" ")
                    }

                    def command2 = "mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.1:copy -Dartifact=$group:$artifactId:$version -DoutputDirectory=$buildDir/jsDependenciesJar"
                    exec {
                        workingDir "$buildDir/npm/node_modules"
                        commandLine command2.split(" ")
                    }
                    copy {
                        def file = file("$buildDir/jsDependenciesJar/$artifactId-${version}.jar")
                        println(file)
                        from file
                        into "$buildDir/npm/libs/"
                    }
                    copy {
                        def file = file("$buildDir/jsDependenciesJar/$artifactId-${version}.jar")
                        println(file)
                        from zipTree(file)
                        into "$buildDir/npm/libs/${artifactId}"
                    }

if(artifactId.contains("-js"))
                    copy {
                        def file = file("$buildDir/jsDependenciesJar/$artifactId-${version}.jar")
                        println(file)
                        from zipTree(file)
                        into "$buildDir/npm/libs/${artifactId.replaceAll("-js","")}"
                    }


                }
            }

        }

/*
        doLast {
            println("embeddedDependency")
            println(configurations.compile)
            printClass(configurations)
            println(configurations.getAsMap().keySet())

            println("embeddedDependency")
            printClass(configurations.jsImplementation)
            println(configurations.jsImplementation.getAll())
            println(configurations.jsImplementation.getAllDependencies())



            println(configurations.jsImplementation.getDependencies())
            println(configurations.metadataCompileClasspath)
            printClass(configurations.metadataCompileClasspath)
            printClass(configurations.metadataCompileClasspath.getPath())
            println(configurations.metadataCompileClasspath)
            println("configurations.jsRuntimeClasspath")
            println("configurations.jsRuntimeClasspath")
            println(configurations.jsRuntime)
            println(configurations.jsImplementation)
            println("IIIIII")
            println("cSSSSSS")
            printClass(configurations.jsImplementation)

            copy {
                from configurations.runtimeClasspath

                into "$buildDir/npm"
            }
        }*/
    }))

    that.tasks.add(task(npmInstall2(type: Exec) {

        dependsOn 'buildPackageJson'
        dependsOn 'assemble'
        dependsOn 'extractCompiledFiles'
        workingDir "$buildDir/npm"
        commandLine 'echo',"4"
        doLast {
            println "npmInstall"
            exec {
                workingDir "$buildDir/npm"
                commandLine 'npm', 'install'
            }


            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }


            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
        }
    }))


    that.tasks.add(task(execNpmInstallGlobal(type: Exec) {
        dependsOn 'buildPackageJson'
        dependsOn 'jsMainClasses'
        dependsOn 'extractCompiledFiles'
        doLast {
            workingDir that.file('./build').absolutePath
            commandLine 'cd', 'npm'
            //executable "npm"
            commandLine 'yarn', 'global', 'add'//,"file:npm/${that.project.name}-js-${that.project.version}.tgz"
            //"/usr/local/bin/npm","init"
            standardOutput = new ByteArrayOutputStream()
            errorOutput = standardOutput
            ignoreExitValue = true
            def output = {
                return standardOutput.toString()
            }
        }
        doLast {
            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
        }
    }))


    that.tasks.add(task(execNpmPack(type: Exec) {

        dependsOn 'buildPackageJson'
        dependsOn 'npmInstall2'
        dependsOn 'extractCompiledFiles'

        workingDir "."
        commandLine 'echo', '"execNpmPack"'

        standardOutput = new ByteArrayOutputStream()
        errorOutput = standardOutput
        ignoreExitValue = true
        def output = {
            return standardOutput.toString()
        }
        doLast {
            System.out.println("beg exec pack")
            exec {
                workingDir that.file("$buildDir/npm").absolutePath
                commandLine 'yarn','pack'
            }
            //"/usr/local/bin/npm","init"

            if (execResult.exitValue != 0) {
                println(standardOutput.toString())
                throw new GradleException("exec failed; see output above")
            }
            println(standardOutput.toString())
            System.out.println("end exec link")
        }
    }))


    that.tasks.add(task(extractCompiledFiles() {
        dependsOn 'jsMainClasses'
        dependsOn 'buildPackageJson'
        doLast {
            copy {

                println( configurations.jsImplementation.allDependencies)
                from "$buildDir/classes/kotlin/nodeJs/main"
                into "$buildDir/npm"
               /* filter {
                    line ->
                        configurations.jsImplementation.allDependencies.each {
                            line = line.replaceAll("'" + it.name + "'", "'./libs/" + it.name + "'");
                            line = line.replaceAll('"' + it.name + '"', '"./libs/' + it.name + '"');
                            if(it.name.contains("-js")){
                               def nName=it.name.replaceAll("-js","")
                                line = line.replaceAll("'" + nName + "'", "'./libs/" + nName + "'");
                                line = line.replaceAll('"' + nName + '"', '"./libs/' + nName + '"');

                            }

                        }
                     //   println("printL"+line)
                        return line;


                }*/


            }
            // exclude 'package/package.json'
            // exclude "$buildDir/npm"
        }
    }
    ))


    // in order to have a tgz in maven , who could be used by npm
    /*that.tasks.add(task(assembleArtifact(type: Zip, group: 'DB') {
        println "assembleArtifact"
        println "$buildDir/libs/"
        archiveName "${that.project.name}.tgz"
        destinationDir file("$buildDir/libs/")
        from "$buildDir/npm"
        description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
        println "end assembleArtifact"
    }))

*/

    that.tasks.add(task(publishNpmLocsal() {

    }
    ))

    publish.dependsOn 'buildPackageJson'
    publish.dependsOn 'execNpmPack'

    that.tasks.add(task(publishNpmLocal() {
    that.publishing{
        publications {

            def PrepPublishJsNpmTgzTask = project.tasks.create("PrepPublishJsNpmTgzTask",{
               def publishJsNpmTgzTask= create("publishJsNpmTgzTask", MavenPublication) {

                    //publishableFiles "$buildDir/npm/${that.project.name}-js-${that.project.version}.tgz"
                    println "beg publish $project.group $project.version"
                    def sourceFile = "$buildDir/npm/${that.project.name}-js-v${that.project.version}.tgz"
                    println(sourceFile)

                    artifactId that.project.name + "-js-tgz"
                    groupId project.group
                    version project.version
                    artifact source: sourceFile, extension: 'tgz'

                    println "end"
                }

            })




        }

    }}));
    publishNodeJsPublicationToMavenLocal.dependsOn(publishNpmLocal)
    publishToMavenLocal.dependsOn(publishNpmLocal)
    publishJsPublicationToMavenLocal.dependsOn(publishNpmLocal)
    publishNpmLocal.dependsOn('nodeJsMainClasses')
    publishNpmLocal.dependsOn('execNpmPack')


};

ext.printClass = { obj ->
    if (obj == null) {
        println("null")
        return
    }
    println(obj.class)
    def fields = obj.class.getDeclaredFields()
    def methods = obj.class.getDeclaredMethods()
    System.out.printf("%d fields:%n", fields.length);
    for (field in fields) {
        System.out.printf("%s %s %n",
                // Modifier.toString(field.getModifiers()),
                field.getType().getSimpleName(),
                field.getName()
        );
    }
    System.out.printf("%d methods:%n", methods.length);
    for (field in methods) {
        System.out.printf("%s %s (",
                field.getReturnType().getSimpleName(),
                field.getName()
        );
        for (p in field.getParameterTypes())
            System.out.printf("%s, ", p.getSimpleName())
        System.out.printf(")%n")
    }
    println("--end--")
};

ext.preparePublishing = { target, that ->
    publishing {
        publications {
            "mavenPublication${target.name}"(MavenPublication) { pub ->

                from components[target.name]
                pom {}
                pom.withXml {
                    def dependenciesNode = asNode().get('dependencies')
                    if (dependenciesNode == null) {
                        dependenciesNode = asNode().appendNode('dependencies')
                    }

                    //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                def artifactName = "${buildDir}/libs/${that.project.name}-${target.name}-${project.version}.jar"
                def artifactSourceName = "${buildDir}/libs/$that.project.name}-${target.name}-${project.version}-sources.jar"

                artifact source: artifactName, classifier: "jar", extension: "jar"

                if (file(artifactSourceName).exists()) {
                    artifact source: artifactSourceName, classifier: "sources", extension: "jar"
                }
            }

        }
    }
}


